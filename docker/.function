get_container_from_compose_name() {
  if [ -f .env ]; then
    . .env
  fi
  folder=$(basename $(pwd))
  project=${COMPOSE_PROJECT_NAME:-$folder}
  parsed=$(echo "${project//[^A-Za-z0-9 ]/}" | tr [:upper:] [:lower:])
  container=$parsed'_'$1'_1';
  echo $container
}
dlog(){
  default=100
  docker-compose logs -f --tail=100 "$@"
}
dexec(){
  if [ -z $2 ]
    then
      command=bash
    else
      command=${@:2}
  fi
  docker-compose exec $1 ${command}
}
droodbmode() {
  mode=$1
  container=$(get_container_from_compose_name tomcat)
  docker exec -it $container sed -i "/<!--/!s/<property name=\"hibernate.hbm2ddl.auto.*/<property name=\"hibernate.hbm2ddl.auto\" value=\"$mode\" \/>/g" /usr/local/tomcat/webapps/acas/WEB-INF/classes/META-INF/persistence.xml
  echo "updated roo to run in '$1' mode; run 'docker restart $container' to apply"
}
dpglogmode(){
  container=$(get_container_from_compose_name db)
  docker exec $container sed -i "s/#log_statement = 'none'/log_statement = 'all'/g" /var/lib/postgresql/data/postgresql.conf
  echo "updated db container to log all sql statments; run 'docker restart $container' to apply"
}
dpgsetting(){
  container=$(get_container_from_compose_name db)
  docker exec $container sed -i "s/\(#\)?$1 = .*/$1 = $2/g" /var/lib/postgresql/data/postgresql.conf
}
dpglogs(){
  numberOfLines=$1
  container=$(get_container_from_compose_name db)
  docker exec $container bash -c 'tail -100f $(/bin/ls -1t /var/lib/postgresql/data/pg_log/* | /bin/sed q)'
}
drstudio-install(){
  acasContainer=$(get_container_from_compose_name "acas")
  install_command="echo 'runner' | passwd --stdin runner && \
     wget https://download2.rstudio.org/rstudio-server-rhel-0.99.489-x86_64.rpm --no-verbose && \
     yum install -y --nogpgcheck rstudio-server-rhel-0.99.489-x86_64.rpm && \
     yum install -y git"
  docker exec --user root $acasContainer bash -c "$install_command"
  echo "rstudio server installed; run 'drstudio-start' to start;"
}
drstudio-start(){
  acasContainer=$(get_container_from_compose_name "rservices")
  docker exec --user root $acasContainer /usr/lib/rstudio-server/bin/rserver
  echo "rstudio started;  make sure port 8787 is mapped"
  sleep 2
  /usr/bin/open -a "/Applications/Google Chrome.app" "http://$DOCKER_HOST_IP:8787"
}
drstudio-stop(){
  acasContainer=$(get_container_from_compose_name "rservices")
  docker exec --user root $acasContainer killall rserver
}
dinstallracas(){
  acasContainer=$(get_container_from_compose_name "rservices")
  docker exec $acasContainer R CMD INSTALL /home/runner/racas
}
dreloadrapache(){
 acasContainer=$(get_container_from_compose_name "rservices")
 docker exec $acasContainer sh bin/acas.sh reload
}

dbackupdb(){
 dbContainer=$(get_container_from_compose_name "db")
 fileName=$1
 folder=$2
 if [ -z $fileName ]
    then
      fileName=acas-`date +"%Y-%m-%d-%s"`.sql
 fi
 if [ -z $folder ]
    then
      folder=.
 fi
 output="$folder/$fileName"
 docker exec $dbContainer pg_dump -U postgres acas > $output
 echo "$output"
}
drestoredb(){
 dbContainer=$(get_container_from_compose_name "db")
 fileName=$1
 if [ -z $fileName ]
    then
      fileName=$(ls -art acas-*.sql | tail -n1)
      if [ -z "$fileName" ]
        then
          echo "argument 1 should be a suitable sql file"
          exit
        else
          echo "warning: argument 1 was empty but proceeding with most recent file found $fileName"
      fi
 fi
 echo "disconnecting sessions on $dbContainer"
 docker exec -it $dbContainer psql -U postgres -c "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = 'acas';"
 echo "dropping acas database"
 docker exec -it $dbContainer psql -U postgres -c "drop database acas;"
 echo "recreating acas database"
 docker exec -it $dbContainer psql -U postgres -c "create database acas;"
 echo "restoring $fileName"
 cat $fileName | docker exec -i $dbContainer psql -U postgres acas
 echo "done restoring $fileName, make sure to restart services"
}
dbackupacas(){
 acasContainer=$(get_container_from_compose_name "acas")
 fileName=$1
 folder=$2
 if [ -z $fileName ]
    then
      fileName=privateUploads-`date +"%Y-%m-%d-%s"`
 fi
 if [ -z $folder ]
    then
      folder=.
 fi
 output="$folder/$fileName"
 mkdir -p $output
 docker cp $acasContainer:/home/runner/build/privateUploads $folder
 echo $output
}
drestoreacas(){
 acasContainer=$(get_container_from_compose_name "acas")
 folder=$1
 if [ -z $folder ]
    then
      folder=$(ls -td privateUploads* | head -1)
      if [ -z "$folder" ]
        then
          echo "argument 1 should be a suitable privateUploads folder"
          return 0
        else
          echo "warning: argument 1 was empty but proceeding with most recent folder found $folder"
      fi
 fi
 echo "removing privateUploads/* from acas container"
 docker exec $acasContainer rm -rf privateUploads/*
 if [ -n "$(ls -A $folder)" ]
 then
  echo "copying $folder/* to acas container"
  docker cp $folder/* $acasContainer:/home/runner/privateUploads
 else
  echo "$folder is empty, nothing to restore"
 fi
 echo "done restoring $folder"
}
dbackup(){
 folder=$1
 if [ -z $folder ]
    then
      folder=acas-backup-`date +"%Y-%m-%d-%s"`
 fi
 echo $folder
 mkdir -p $folder
 dbackupdb acas-database.sql $folder
 dbackupacas privateUploads $folder
}
drestore(){
 folder=$1
 if [ -z $folder ]
   then
     folder=$(ls -td acas-backup-* | head -1)
     if [ -z "$folder" ]
       then
         echo "argument 1 should be a suitable acas-backup folder"
         return 0
       else
         echo "warning: argument 1 was empty but proceeding with most recent backup folder found $folder"
     fi
 fi
 drestoredb $folder/acas-database.sql
 drestoreacas $folder/privateUploads
}
dcopybuild(){
 id=$(docker create acascustom_acas bash)
 docker cp $id:/home/runner/build ../build
 docker rm $id
}
dcopybuildtar(){
  acasContainer=$(get_container_from_compose_name "acas")
  
}
dcopyimagebuild() {
 image=$1
 if [ -z $image ]
  then
    foldername=$(basename $(pwd))
    parsed=$(echo "${foldername//[^A-Za-z0-9 ]/}" | tr [:upper:] [:lower:])
    image=$parsed'_acas';
 fi
 id=$(docker create $image)
 docker cp $id:/home/runner/build - > "$image"_build.tar.gz
 docker rm -v $id
}
dcopybuildcontainer(){
 acasContainer=$(get_container_from_compose_name "acas")
 docker cp $acasContainer:/home/runner/build ..
}
dbob() {
 # getOrCreateACASBob
 curl -i -X GET -H "Accept: application/json" http://$DOCKER_HOST_IP:3001/api/systemTest/getOrCreateACASBob
 # getOrCreateGlobalProject
 curl -i -X GET -H "Accept: application/json" http://$DOCKER_HOST_IP:3001/api/systemTest/getOrCreateGlobalProject
 # getOrCreateGlobalProjectRole
 curl -i -X GET -H "Accept: application/json" http://$DOCKER_HOST_IP:3001/api/systemTest/getOrCreateGlobalProjectRole
 # giveBobRoles
 curl -i -X GET -H "Accept: application/json" http://$DOCKER_HOST_IP:3001/api/systemTest/giveBobRoles
 # getOrCreateCmpdRegBob
 curl -i -X GET -H "Accept: application/json" http://$DOCKER_HOST_IP:3001/api/systemTest/getOrCreateCmpdRegBob
 # getOrCreateCmpdRegBob
 curl -i -X GET -H "Accept: application/json" http://$DOCKER_HOST_IP:3001/api/systemTest/getOrCreateCmpdRegBob
 # syncRoles
 curl -i -X GET -H "Accept: application/json" http://$DOCKER_HOST_IP:3001/api/systemTest/syncRoles
}
